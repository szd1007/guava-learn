package designPattern.chp5_behavior_patterns;

/**
 * 模板方法
 * 1 意图 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使子类可以不改变一个算法的结构即可
 * 重定义该算法的某些特定步骤
 *
 * 4 普通的 abstractClass    concreteClass 架构
 *
 * 7 效果
 * 模板方法是一种代码复用的基本技术。类库中尤为重要，他们提取了类库中的公共行为。
 * 是一种反向的控制结构， "好莱坞法则",别找我们 我们找你。指的是一个父类调用一个子类的操作，而不是相反。
 *
 * 模板方法提供下面的操作
 * 普通操作
 * 抽象方法
 * factoryMethod
 * hook 操作（意味着这种操作不用非要在子类重写，只用在有用的时候才进行）
 *
 * 8实现
 *  尽量减少一个子类具体要实现的原语方法
 *  指定一个命名约定，可以给被重定义的那些操作的名字加上一个前缀以识别它们。
 *
 *  11 相关模式
 *    factoryMethod常常被模板凡事使用。
 *    strategy59 模板方法使用继承来改变算法的一部分。  strategy则使用委托改变整个算法
 *
 */
public class aTemplateMethod510 {
}
